// src/jobs/notificationCleanupJob.js
import cron from 'node-cron';
import db from '../config/db.js';

/**
 * Limpa notifica√ß√µes lidas com mais de 30 dias
 */
const cleanupOldNotifications = async () => {
  try {
    // Deletar notifica√ß√µes lidas com mais de 30 dias
    const [result] = await db.query(
      `DELETE FROM notificacoes 
       WHERE lida = TRUE 
       AND created_at < DATE_SUB(NOW(), INTERVAL 30 DAY)`
    );

    const deletedCount = result.affectedRows || 0;
    
    if (deletedCount > 0) {
      console.log(`üóëÔ∏è  [CLEANUP] ${deletedCount} notifica√ß√µes antigas foram removidas.`);
    }
    
    return deletedCount;
  } catch (error) {
    console.error('‚ùå [CLEANUP] Erro ao limpar notifica√ß√µes antigas:', error);
    throw error;
  }
};

/**
 * Cron job para limpeza de notifica√ß√µes
 * Executa todos os dias √†s 02:00 (madrugada)
 */
export const startNotificationCleanupJob = () => {
  // Executar todos os dias √†s 02:00
  cron.schedule('0 2 * * *', async () => {
    console.log('üïê [CRON] Executando job de limpeza de notifica√ß√µes...');
    try {
      const count = await cleanupOldNotifications();
      if (count > 0) {
        console.log(`‚úÖ [CRON] Limpeza conclu√≠da. ${count} notifica√ß√µes removidas.`);
      } else {
        console.log('‚úÖ [CRON] Limpeza conclu√≠da. Nenhuma notifica√ß√£o antiga encontrada.');
      }
    } catch (error) {
      console.error('‚ùå [CRON] Erro ao executar job de limpeza:', error);
    }
  });

  console.log('‚úÖ Cron job de limpeza de notifica√ß√µes iniciado (executa diariamente √†s 02:00)');
};

/**
 * Executar manualmente para testar
 */
export const runCleanupJobManually = async () => {
  console.log('üîÑ Executando limpeza de notifica√ß√µes manualmente...');
  try {
    const count = await cleanupOldNotifications();
    console.log(`‚úÖ Limpeza conclu√≠da. ${count} notifica√ß√µes removidas.`);
    return count;
  } catch (error) {
    console.error('‚ùå Erro ao executar limpeza:', error);
    throw error;
  }
};
