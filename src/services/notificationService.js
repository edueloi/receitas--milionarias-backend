// src/services/notificationService.js
import db from '../config/db.js';

/**
 * Verifica se o usu√°rio tem a prefer√™ncia de notifica√ß√£o ativada
 * @param {number} userId - ID do usu√°rio
 * @param {string} notificationType - Tipo da notifica√ß√£o
 * @returns {boolean} - true se o usu√°rio quer receber essa notifica√ß√£o
 */
const userWantsNotification = async (userId, notificationType) => {
  try {
    const [prefs] = await db.query(
      'SELECT preferencia_valor FROM user_preferences WHERE user_id = ? AND preferencia_chave = ?',
      [userId, notificationType]
    );
    
    // Se n√£o tem prefer√™ncia salva, considera como TRUE (ativado por padr√£o)
    if (prefs.length === 0) return true;
    
    // Verifica o valor da prefer√™ncia
    return prefs[0].preferencia_valor === 'true' || prefs[0].preferencia_valor === true;
  } catch (error) {
    console.error('‚ùå Erro ao verificar prefer√™ncia:', error);
    return true; // Em caso de erro, envia a notifica√ß√£o
  }
};

/**
 * Filtra usu√°rios que querem receber determinado tipo de notifica√ß√£o
 * @param {number[]} userIds - Array de IDs de usu√°rios
 * @param {string} notificationType - Tipo da notifica√ß√£o
 * @returns {number[]} - Array de IDs filtrados
 */
const filterUsersByPreference = async (userIds, notificationType) => {
  const filtered = [];
  
  for (const userId of userIds) {
    const wants = await userWantsNotification(userId, notificationType);
    if (wants) {
      filtered.push(userId);
    }
  }
  
  return filtered;
};

/**
 * Cria notifica√ß√£o para usu√°rio(s) espec√≠fico(s)
 * @param {number|number[]} userIds - ID do usu√°rio ou array de IDs
 * @param {string} tipo - Tipo da notifica√ß√£o (nova_receita, comentario, novo_afiliado, etc)
 * @param {string} titulo - T√≠tulo da notifica√ß√£o
 * @param {string} mensagem - Mensagem da notifica√ß√£o
 * @param {string} link - Link relacionado √† notifica√ß√£o
 */
export const createNotification = async (userIds, tipo, titulo, mensagem, link = null) => {
  try {
    const ids = Array.isArray(userIds) ? userIds : [userIds];
    
    if (ids.length === 0) return;

    // Filtrar usu√°rios que querem receber esse tipo de notifica√ß√£o
    const filteredIds = await filterUsersByPreference(ids, tipo);
    
    if (filteredIds.length === 0) {
      console.log(`‚ÑπÔ∏è Nenhum usu√°rio quer receber notifica√ß√£o do tipo: ${tipo}`);
      return;
    }

    const values = filteredIds.map(userId => [userId, tipo, titulo, mensagem, link]);
    
    const sql = `
      INSERT INTO notificacoes (user_id, tipo, titulo, mensagem, link)
      VALUES ?
    `;
    
    await db.query(sql, [values]);
    console.log(`‚úÖ Notifica√ß√µes criadas: ${tipo} para ${filteredIds.length} usu√°rio(s)`);
  } catch (error) {
    console.error('‚ùå Erro ao criar notifica√ß√£o:', error);
  }
};

/**
 * Busca todos os IDs de usu√°rios com permiss√µes espec√≠ficas
 * @param {number[]} permissionIds - Array de IDs de permiss√µes
 */
export const getUsersByPermissions = async (permissionIds) => {
  try {
    const [users] = await db.query(
      'SELECT id FROM usuarios WHERE id_permissao IN (?) AND id_status = 1',
      [permissionIds]
    );
    return users.map(u => u.id);
  } catch (error) {
    console.error('‚ùå Erro ao buscar usu√°rios por permiss√£o:', error);
    return [];
  }
};

/**
 * Busca todos os administradores ativos
 */
export const getAdminUsers = async () => {
  return getUsersByPermissions([1]); // ID 1 = admin
};

/**
 * Busca todos os usu√°rios ativos (exceto o pr√≥prio usu√°rio)
 */
export const getAllActiveUsers = async (exceptUserId = null) => {
  try {
    let query = 'SELECT id FROM usuarios WHERE id_status = 1';
    const params = [];
    
    if (exceptUserId) {
      query += ' AND id != ?';
      params.push(exceptUserId);
    }
    
    const [users] = await db.query(query, params);
    return users.map(u => u.id);
  } catch (error) {
    console.error('‚ùå Erro ao buscar usu√°rios ativos:', error);
    return [];
  }
};

/**
 * Notifica√ß√£o de NOVA RECEITA - Todos veem
 */
export const notifyNewRecipe = async (recipeId, recipeTitle, creatorId) => {
  try {
    const allUsers = await getAllActiveUsers(creatorId);
    
    await createNotification(
      allUsers,
      'nova_receita',
      'Nova Receita Publicada! üç≥',
      `Uma nova receita "${recipeTitle}" est√° dispon√≠vel no sistema.`,
      `/receitas/${recipeId}`
    );
  } catch (error) {
    console.error('‚ùå Erro ao notificar nova receita:', error);
  }
};

/**
 * Notifica√ß√£o de COMENT√ÅRIO - Apenas criador da receita v√™
 */
export const notifyNewComment = async (recipeId, recipeTitle, commentAuthorName, recipeCreatorId) => {
  try {
    await createNotification(
      recipeCreatorId,
      'comentario',
      'Novo Coment√°rio na sua Receita üí¨',
      `${commentAuthorName} comentou na receita "${recipeTitle}".`,
      `/receitas/${recipeId}#comentarios`
    );
  } catch (error) {
    console.error('‚ùå Erro ao notificar novo coment√°rio:', error);
  }
};

/**
 * Notifica√ß√£o de NOVO AFILIADO - Apenas quem indicou v√™
 */
export const notifyNewAffiliate = async (newUserName, indicatorId) => {
  try {
    await createNotification(
      indicatorId,
      'novo_afiliado',
      'Novo Afiliado Cadastrado! üéâ',
      `${newUserName} se cadastrou usando seu c√≥digo de afiliado.`,
      '/carteira'
    );
  } catch (error) {
    console.error('‚ùå Erro ao notificar novo afiliado:', error);
  }
};

/**
 * Notifica√ß√£o de NOVO USU√ÅRIO - Apenas admin v√™
 */
export const notifyNewUser = async (userName, userEmail) => {
  try {
    const admins = await getAdminUsers();
    
    await createNotification(
      admins,
      'sistema',
      'Novo Usu√°rio Cadastrado üë§',
      `${userName} (${userEmail}) acabou de se cadastrar no sistema.`,
      '/admin/usuarios'
    );
  } catch (error) {
    console.error('‚ùå Erro ao notificar novo usu√°rio:', error);
  }
};

/**
 * Notifica√ß√£o de NOVA CATEGORIA - Apenas admin v√™
 */
export const notifyNewCategory = async (categoryName) => {
  try {
    const admins = await getAdminUsers();
    
    await createNotification(
      admins,
      'sistema',
      'Nova Categoria Criada üìÅ',
      `A categoria "${categoryName}" foi adicionada ao sistema.`,
      '/categories'
    );
  } catch (error) {
    console.error('‚ùå Erro ao notificar nova categoria:', error);
  }
};

/**
 * Notifica√ß√£o de NOVA TAG - Apenas admin v√™
 */
export const notifyNewTag = async (tagName) => {
  try {
    const admins = await getAdminUsers();
    
    await createNotification(
      admins,
      'sistema',
      'Nova Tag Criada üè∑Ô∏è',
      `A tag "${tagName}" foi criada no sistema.`,
      '/admin/tags'
    );
  } catch (error) {
    console.error('‚ùå Erro ao notificar nova tag:', error);
  }
};

/**
 * Notifica√ß√£o de SA√çDA DE USU√ÅRIO - Apenas admin v√™
 */
export const notifyUserDeletion = async (userName, userEmail) => {
  try {
    const admins = await getAdminUsers();
    
    await createNotification(
      admins,
      'sistema',
      'Usu√°rio Saiu do Sistema ‚ùå',
      `${userName} (${userEmail}) foi removido do sistema.`,
      '/admin/usuarios'
    );
  } catch (error) {
    console.error('‚ùå Erro ao notificar sa√≠da de usu√°rio:', error);
  }
};

/**
 * Notifica√ß√£o de NOVO EBOOK - Todos veem
 */
export const notifyNewEbook = async (ebookId, ebookTitle, creatorId) => {
  try {
    const allUsers = await getAllActiveUsers(creatorId);
    
    await createNotification(
      allUsers,
      'sistema',
      'Novo eBook Dispon√≠vel! üìö',
      `O eBook "${ebookTitle}" foi publicado e est√° dispon√≠vel.`,
      `/ebooks/${ebookId}`
    );
  } catch (error) {
    console.error('‚ùå Erro ao notificar novo ebook:', error);
  }
};

export default {
  createNotification,
  getUsersByPermissions,
  getAdminUsers,
  getAllActiveUsers,
  notifyNewRecipe,
  notifyNewComment,
  notifyNewAffiliate,
  notifyNewUser,
  notifyNewCategory,
  notifyNewTag,
  notifyUserDeletion,
  notifyNewEbook,
};
